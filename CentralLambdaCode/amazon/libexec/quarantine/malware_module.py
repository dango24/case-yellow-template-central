#!/System/Library/Frameworks/Python.framework/Versions/Current/bin/python

## Mac Quarantine: malware_module.py
## Copyright Amazon
## Written by Gerrit DeWitt (gerritd@amazon.com)
## Version 1.5.0.2 - 2017-12-11
## Project started 2013-04-22

import subprocess, os, sys, syslog, time, datetime, plistlib
from common_quarantine import *

def runTool():
	# Defaults:
	isCompliant = False
	
	# Run softwareupdate and read its preferences:
	toolPath = '/usr/sbin/softwareupdate'
	prefsPath = '/Library/Preferences/com.apple.SoftwareUpdate.plist'
	logger.info('Running %s...' % toolPath)
	cmd = [toolPath,'--background-critical']
	[output,returnCode] = azSubprocess(cmd)
	# Software Update kicks off a helper, so the exit code is not zero.
	# Wait for the helper to do its thing.
	time.sleep(20)

	if not os.path.exists(prefsPath):
		logger.error('Missing %s!' % prefsPath)
	else:
		# Using defaults here; plistlib doesn't like /Library/Preferences/com.apple.SoftwareUpdate.plist
		cmd = ['defaults','read',prefsPath,'LastBackgroundCCDSuccessfulDate']
		try:
			[output,returnCode] = azSubprocess(cmd)
			lastCriticalScan = output.split(' ')[0] + ' ' + output.split(' ')[1]
			lastCriticalScan = datetime.datetime.strptime(lastCriticalScan,'%Y-%m-%d %H:%M:%S')
			if abs(datetime.datetime.utcnow() - lastCriticalScan) >= datetime.timedelta(days=1):
				logger.error('LastBackgroundCCDSuccessfulDate older than one day.')
			else:
				isCompliant = True
		except:
			logger.error('Missing necessary keys in %s.' % prefsPath)
	# Return:
	return isCompliant

def main():
	## MAIN
	outputPath = outputPathForModuleNamed('Malware')
	
	# Read output file:
	try:
		outputDict = plistlib.readPlist(outputPath)
	except:
		outputDict = {}
	
	# Date stamp:
	outputDict['moduleLastCheck'] = datetime.datetime.utcnow()

	# Determine compliance:
	isCompliant = runTool()
	outputDict['moduleCompliant'] = isCompliant

	# Write outputDict:
	if outputDict != {}:
		plistlib.writePlist(outputDict,outputPath)

if __name__ == '__main__':
	global azIdentifier
	global logger
	azIdentifier = 'com.amazon.acme.quarantine.malware_module.py'
	logger = azLogger(azIdentifier)
	try:
		main()
	except:
		logger.error('Generic exception.')
