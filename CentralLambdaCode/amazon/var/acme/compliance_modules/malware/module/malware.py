import subprocess
import os
import time
import datetime
import plistlib
import logging

import acme.compliance as compliance

__version__ = "1.0"

class MalwareMacOSComplianceModule(compliance.BaseModule):
    """
    Compliance Module for macOS which will evaluate malware compliance
    """
        
    logger_name = "MalwareMacOS"
    auto_remediate = False
    can_remediate = False
    malware_tool_path = "/usr/sbin/softwareupdate"
    malware_pref_path = "/Library/Preferences/com.apple.SoftwareUpdate.plist"
    
    def __init__(self,key_map=None,settings_keys=None,*args,**kwargs):
                
        self.identifier = "malware"
        self.name = "MalwareMacOS"
        self.evaluation_interval = datetime.timedelta(hours=1)
        self.evaluation_skew = datetime.timedelta(minutes=15)
        self.triggers = compliance.ExecutionTrigger.SCHEDULED
        self.prerequisites = compliance.ExecutionPrerequisites.ONLINE
        
        if key_map is None:
            key_map = {}
            key_map.update(compliance.BaseModule.key_map)
            key_map["malware_tool_path"] = None
            key_map["malware_pref_path"] = None
        
        if settings_keys is None:
            settings_keys = compliance.BaseModule.settings_keys[:]
            settings_keys.append("malware_tool_path")
            settings_keys.append("malware_pref_path")
        
        super(MalwareMacOSComplianceModule, self).__init__(name=self.name,
                                                identifier=self.identifier,
                                                key_map=key_map,
                                                settings_keys=settings_keys,
                                                *args, **kwargs)
    
    
    def evaluate_(self, *args, **kwargs):
        """
        Method to evaluate malware compliance    
        """
        
        status = compliance.ComplianceStatus.UNKNOWN
        self.load_settings()
        
        logger = logging.getLogger(self.logger_name)

        if not os.path.exists(self.malware_tool_path):
            logger.warning("Malware tool not found at {}.".format(self.malware_tool_path))
            status = compliance.ComplianceStatus.ERROR
        else:
            cmd = [self.malware_tool_path, "--background-critical"]
            try:
                try:
                    output = subprocess.check_output(cmd)
                    # Software Update kicks off a helper. Wait for the helper to do its thing.
                    time.sleep(20)
                except:
                    # This process can return a non zero return code throwing an exception at times.
                    # Regardless, the plist content is what we care about.
                    pass

                if not os.path.exists(self.malware_pref_path):
                    logger.error("Malware preferences file was not found at {}.".format(self.malware_pref_path))
                    status = compliance.ComplianceStatus.ERROR
                else:
                    cmd = ["/usr/bin/plutil","-convert","xml1","-o","-",self.malware_pref_path]
                    plist_data = subprocess.check_output(cmd)
                    plist = plistlib.readPlistFromString(plist_data)
                    try:
                        last_check = plist["LastBackgroundSuccessfulDate"]
                    except KeyError:
                        last_check = datetime.datetime.utcnow() - datetime.timedelta(days=2)
                        logger.error("Missing LastBackgroundSuccessfulDate key in Malware preferences file at {}. Setting stale state.".format(self.malware_pref_path))
                        status = compliance.ComplianceStatus.ERROR
                    if abs(datetime.datetime.utcnow() - last_check) >= datetime.timedelta(days=1):
                        logger.warning("LastBackgroundSuccessfulDate key indicates Malware preferences file is stale.")
                        status = compliance.ComplianceStatus.ERROR
                    else:
                        status = compliance.ComplianceStatus.COMPLIANT
            except Exception as exp:
                logger.error("Failed to run Malware tool:{}".format(exp))
                logger.log(5,"Failure stack trace (handled cleanly):",exc_info=1)
                status = compliance.ComplianceStatus.ERROR
                
        return compliance.EvaluationResult(compliance_status=status, execution_status=compliance.ExecutionStatus.SUCCESS)    
