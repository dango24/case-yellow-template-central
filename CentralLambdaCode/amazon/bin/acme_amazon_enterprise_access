#!/usr/bin/python

"""
.. executable:: acme
    :synopsis: Command line tool used to interogate running ACME engines.
    :platform: OSX, Ubuntu

.. moduleauthor:: Beau Hunter <beauhunt@amazon.com>

"""

import sys, os
import logging
import socket
sys.path.insert(0,"/usr/local/amazon/lib")
import acme.ipc as ipc
import json
import struct
import sys
import uuid
from systemprofile import SystemProfileBase
from systemprofile.systemprofile_osx import SystemProfileOSX
from subprocess import check_output
import OpenSSL
import time
import datetime

CMD_CUSTOM_INVOKE_PARAMETERS = [ "getAcmeData", "getAcmeDataLongLived"]

# Read a message from stdin and decode it.
def getMessage():
    rawLength = sys.stdin.read(4)
    if len(rawLength) == 0:
        sys.exit(0)
    messageLength = struct.unpack('@I', rawLength)[0]
    message = sys.stdin.read(messageLength)
    return json.loads(message)


# Encode a message for transmission,
# given its content.
def encodeMessage(messageContent):
    encodedContent = json.dumps(messageContent)
    encodedLength = struct.pack('@I', len(encodedContent))
    return {'length': encodedLength, 'content': encodedContent}


# Send an encoded message to stdout
def sendMessage(encodedMessage, printLength=True):
    if printLength:
        sys.stdout.write(encodedMessage['length'])
    sys.stdout.write(encodedMessage['content'])
    sys.stdout.flush()

# Make health check
def makeHealthCheckResponse():
    healthCheckResponse = {}
    healthCheckResponse["ACMEReachable"] = False
    healthCheckResponse["RegisteredWithKarl"] = False
    healthCheckResponse["Jwt"] = ""
    healthCheckResponse["type"] = "HealthCheck"
    with ipc.Client(run_directory="/usr/local/amazon/var/acme/run") as c:
        # Submit "GetACMEReachable" request
        r_GetStatus = ipc.Request(action="GetACMEReachable")
        re_GetStatus = c.submit_request(r_GetStatus)
        # Submit "GetIsRegistered" request
        r_GetIsRegistered = ipc.Request(action="GetIsRegistered")
        re_GetIsRegistered = c.submit_request(r_GetIsRegistered)
        # Submit "GetJWT" request
        r_GetJWT = ipc.Request(action="GetJWT")
        re_GetJWT = c.submit_request(r_GetJWT)
    # Check if ACME is reachable
    response_GetStatus = re_GetStatus.status
    if response_GetStatus == "Success":
        healthCheckResponse["ACMEReachable"] = True
    else:
        healthCheckResponse["ACMEReachable"] = False
    # Check if device has been registered
    response_GetIsRegistered = re_GetIsRegistered.data
    if response_GetIsRegistered == True:
        healthCheckResponse["RegisteredWithKarl"] = response_GetIsRegistered
    # Get JWT
    response_GetJWT_status = re_GetJWT.status
    healthCheckResponse["Jwt"] = response_GetJWT_status
    return healthCheckResponse

def makeJwtResponse(duration=None):
    """
    Method which returns our jwt token.

    :param int duration: Expiry duration of token. (UNIT: seconds)
    """
    jwtResponse = {}
    jwtResponse["Jwt"] = ""
    jwtResponse["Status"] = None
    with ipc.Client(run_directory="/usr/local/amazon/var/acme/run") as c:
        r_GetStatus = ipc.Request(action="GetACMEReachable")
        re_GetStatus = c.submit_request(r_GetStatus)
        response_GetStatus = re_GetStatus.status
        if response_GetStatus == "Success":
            if duration:
                r_GetJWT = ipc.Request(action="GetJWT", options={"duration" : duration})
            else:
                r_GetJWT = ipc.Request(action="GetJWT")
            re_GetJWT = c.submit_request(r_GetJWT)
            jwtResponse["Jwt"] = re_GetJWT.data['jwt']
            jwtResponse["Status"] = re_GetJWT.status
    jwtResponse["type"] = "GetJWT"
    return jwtResponse

def makeConfigResponse():
    configResponse = {}
    with ipc.Client(run_directory="/usr/local/amazon/var/acme/run") as c:
        r_GetAEAConfig = ipc.Request(action="GetAEAConfig")
        re_GetAEAConfig = c.submit_request(r_GetAEAConfig)
        data_format = (re_GetAEAConfig.data['aea_config'].encode('ascii','ignore'))
        configResponse = json.loads(data_format)
        configResponse["type"] = "Configuration"
    return configResponse

def runCmd(receivedMessage, printLength=True):
    if receivedMessage == "getAcmeData":
        sendMessage(encodeMessage(makeJwtResponse()), printLength)
    if receivedMessage == "getAcmeDataLongLived":
        sendMessage(encodeMessage(makeJwtResponse(duration=7200)), printLength)
    if receivedMessage == "healthCheck":
	sendMessage(encodeMessage(makeHealthCheckResponse()), printLength)
    if receivedMessage == "getConfig":
	sendMessage(encodeMessage(makeConfigResponse()), printLength) 

def checkCommandLineArgs():
    if len(sys.argv) > 1 and sys.argv[1] in CMD_CUSTOM_INVOKE_PARAMETERS:
        return True
    return False

if __name__ == '__main__':
    # If invoked from command line with arguments
    if checkCommandLineArgs():
        runCmd(receivedMessage=sys.argv[1], printLength=False)
    else:
        while True:
            receivedMessage = getMessage()
            runCmd(receivedMessage=receivedMessage)
#while True:
#    receivedMessage = getMessage()
#    sysprofile = SystemProfileBase()
#    m = {}
#    with ipc.Client(run_directory="/usr/local/amazon/var/acme/run") as c:
#        r = ipc.Request(action="GetJWT")
#        re = c.submit_request(r)
#        response = re.data
#    sendMessage(encodeMessage(response))
