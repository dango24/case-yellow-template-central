#!/System/Library/Frameworks/Python.framework/Versions/Current/bin/python

## detool
## Written by Gerrit DeWitt (gerritd@amazon.com)
## Modified by Jason Simmons (jasosimm@amazon.com)
## Version 2.9.8.5 - 2018-10-25 Copyright Amazon
## User-context component for configuring and interrogating FileVault disk encryption state.

import os, sys, datetime, getpass
sys.path.insert(0,'/usr/local/amazon/libexec/acme')
from common_acme import *

## SUBROUTINES

def azShowToolHelp():
## Displays syntax help.
	print '''
-------
Amazon Assistant: detool
Version 2.9.8.4d Copyright Amazon
Checks status of and configures disk encryption using FileVault.
-------
USAGE: detool status|configure
status: Returns the status of the FileVault configuration for this computer, including:
   : Requirement: Should FileVault be enabled per InfoSec policy.
   : Encrypted: True if FileVault is enabled for the startup disk.
   : Disk Password: Status of the disk password (used by Amazon for recovery).
   : Users Provisioned: True if at least one user can unlock disk.
   : User Status: Whether or not the requested or current user can unlock the startup disk
     or is eligible to be configured to unlock it.
configure: Performs a configuration routine consisting of:
   : If FileVault is off, enable it with the default Disk Password.
     The system will need to be restarted after when FileVault is turned on.
   : If the current user is eligible but not provisioned, provision his/her account.
     User and password come from the $FILEVAULT_USER and $FILEVAULT_PASSWORD env vars,
     which are provided by the Assistant app.  Arbitrary eligible users may also be provisioned.
   : Manging the disk password:  Attempt to change the Disk Password periodically.
     Periodically means: every 90 days if at least one user is provisioned, or
     immediately after provisioning the first user, or
     after 14 days of having the default Disk Password.
-------
DISK PASSWORD NOTICE: This tool's helper manages the FileVault disk password.
It stores the current and previous disk passwords in the System keychain to facilitate automatic disk password rotation.

The Assistant app may request a disk password if this tool cannot find the current one in the System keychain.
In that case, the Assistant would prompt for any password that can unlock the disk, set the $FILEVAULT_DISK_PASSWORD
env var, and re-run detool.  This env var can also be set manually when running detool from the command line.
-------
IMPORTANT: This tool is meant to be run by the user, whether or not the user is a local administrator.
-------
'''

def validateArgs():
## Validates arguments, and returns true/false.
	argsValid = False
	global action
	if len(sys.argv) == 2:
		# Define args:
		action = sys.argv[1]
		# Validate args:
		if ( action == 'status' or action == 'configure'):
			argsValid = True		
	# Return:
	return argsValid

def getEnvironmentVars():
# Get the environment vars if set.
	try:	
		userToCheck = os.environ['FILEVAULT_USER']
	except KeyError:
		userToCheck = 'try-session-user'
	try:	
		userPassword = os.environ['FILEVAULT_PASSWORD']
	except KeyError:
		userPassword = 'not-supplied'
	try:	
		diskUnlockPassword = os.environ['FILEVAULT_DISK_PASSWORD']
	except KeyError:
		diskUnlockPassword = 'not-supplied'
	return userToCheck, userPassword, diskUnlockPassword

def main():
## MAIN
	# Open mainDictionary:
	mainDictionary = azLoadMainDictionary()
	# Sockets paths:
	toHelperSocketPath = mainDictionary['socketPaths']['detool']['toHelper']
	fromHelperSocketPath = uniquePathFromPath(mainDictionary['socketPaths']['detool']['fromHelper'])
	launchdSocketPath = mainDictionary['socketPaths']['detool']['launchd']
	# Parse args:
	if not validateArgs():
		azShowToolHelp()
	else:
		# Assemble messageArray:
		messageArray = []
		messageArray.append(fromHelperSocketPath)
		messageArray.append(action)
		# Environment variables:  These are sent in all cases, even if invalid; they may not be used.
		[userToCheck, userPassword, diskUnlockPassword] = getEnvironmentVars()
		# Add credentials to messageArray:
		messageArray.append(userToCheck)
		messageArray.append(userPassword)
		messageArray.append(diskUnlockPassword)
		# Set timeouts:
		if action == 'status':
			# Set the helper timeout to 60 seconds when checking status:
			# Previously set to 30 but was timing out
			helperTimeout = 60
		else:
			# Set the helper timeout to five minutes when modifying disk:
			helperTimeout = 300
		# Ask launchd to run the helper:
		logger.info('Asking launchd to run the helper...')
		helperLaunched = ipcSend([], launchdSocketPath)
		if not helperLaunched:
			logger.error('My required helper is not running.')
		else:
			# Send messageArray:
			logger.info('Sending message to helper...')
			messageSent = ipcSend(messageArray, toHelperSocketPath)
			if not messageSent:
				logger.error('Did not communicate with helper.')
			else:
				# Print messages as they come from the helper:
				logger.info('Waiting for messages from helper.')
				ipcReceiveMessagesFromHelper(fromHelperSocketPath, helperTimeout, azHelperIdentifier)

if __name__ == '__main__':
	global azIdentifier
	global azHelperIdentifier
	global logger
	
	azIdentifier = 'com.amazon.acme.detool'
	azHelperIdentifier = 'com.amazon.acme.helper.detool'
	logger = azLogger(azIdentifier)
	try:
		main()
	except:
		logger.error('Generic exception.')
