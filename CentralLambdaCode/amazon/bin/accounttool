#!/System/Library/Frameworks/Python.framework/Versions/Current/bin/python

## accounttool
## Written by Gerrit DeWitt (gerritd@amazon.com)
## Modified by Jason Simmons (jasosimm@amazon.com)
## Version 2.9.8.5 - 2018-10-25 Copyright Amazon

import sys, datetime
sys.path.insert(0,'/usr/local/amazon/libexec/acme')
from common_acme import *

## SUBROUTINES

def azShowToolHelp():
## Displays syntax help.
	print '''
-------
Account Tool (accounttool): Grants or revokes local administrator rights.
Version 2.9.8.4d Copyright Amazon
http://w.amazon.com/index.php/ClientEng/Mac/Admin_Rights
-------
USAGE: accounttool status|configure|remove
status: Returns the status for the current user account.
configure: Attempts to make the current user a local administrator.
remove: Removes the current user from the local administrator group.
-------
Possible values for the status are:
1. is-admin: The user has administrator rights.
2. indeterminate:  If not already an admin, but no communication with Active Directory.
3. admin-eligible: The user does not have administrator rights, and is eligible for them.
4. not-admin-eligible: The user does not have administrator rights, but is not eligible for them.
-------
ABOUT ELIGIBILITY:
1. As a necessary requirement, this computer must be bound to and communicating with Active Directory.
   If not, user accounts that do not already have administrator rights will always be indeterminate.
2. Each of the following is a sufficient requirement for admin rights eligiblity:
   A. The user's employeeType attribute matches F, H, I, R, or X.
   B. The value of this computer's managedBy attribute matches the user.
-------
'''

def validateArgs():
## Validates arguments, and returns true/false.
	argsValid = False
	global action
	# Syntax is accounttool status|configure|remove:
	if len(sys.argv) == 2:
		# Define args:
		action = sys.argv[1]
		# Validate args:
		if ( action == 'status' or action == 'configure' or action == 'remove' ):
			argsValid = True		
	# Return:
	return argsValid

def main():
## MAIN
	# Open mainDictionary:
	mainDictionary = azLoadMainDictionary()
	adDomain = mainDictionary['adDomain']
	# Sockets paths:
	toHelperSocketPath = mainDictionary['socketPaths']['accounttool']['toHelper']
	fromHelperSocketPath = uniquePathFromPath(mainDictionary['socketPaths']['accounttool']['fromHelper'])
	launchdSocketPath = mainDictionary['socketPaths']['accounttool']['launchd']
	# Parse args:
	if not validateArgs():
		azShowToolHelp()
	else:
		# Valid args: validate user.
		[haveValidUser, user, userHomePath] = validateUser(adDomain)
		if not haveValidUser:
			logger.info('Requested user (' + user + ') is not a cached account from Active Directory.')
		else:
			# Assemble messageArray:
			messageArray = []
			messageArray.append(fromHelperSocketPath)
			messageArray.append(action)
			messageArray.append(user)
			# Ask launchd to run the helper:
			logger.info('Asking launchd to run the helper...')
			helperLaunched = ipcSend([], launchdSocketPath)
			if not helperLaunched:
				logger.error('My required helper is not running.')
			else:
				# Send messageArray:
				logger.info('Sending message to helper...')
				messageSent = ipcSend(messageArray, toHelperSocketPath)
				if not messageSent:
					logger.error('Did not communicate with helper. It may be answering another request.  Please wait a minute then try again.')
				else:	
					# Print messages as they come from the helper:
					logger.info('Waiting for messages from helper.')
					ipcReceiveMessagesFromHelper(fromHelperSocketPath, 30, azHelperIdentifier)

if __name__ == '__main__':
	global azIdentifier
	global azHelperIdentifier
	global logger
	
	azIdentifier = 'com.amazon.acme.accounttool'
	azHelperIdentifier = 'com.amazon.acme.helper.accounttool'
	logger = azLogger(azIdentifier)
	try:
		main()
	except:
		logger.error('Generic exception.')
