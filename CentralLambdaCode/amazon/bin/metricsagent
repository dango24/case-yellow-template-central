#!/usr/bin/python
from __future__ import print_function
import argparse, subprocess, json, os, time, platform, logging, urllib2, urllib, re
from random import randint

parser = argparse.ArgumentParser(prog="Metrics Agent.")
parser.add_argument("--sleep",action="store", help=("Usage --sleep '<int>' (seconds)"), type=int)
args = parser.parse_args()

# Setup logging
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/var/log/clienteng-metricagent.log')
#handler = logging.FileHandler('clienteng-metricagent.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler) 
logger.setLevel(logging.INFO)

class ComplianceStatus(object):
    """
    Enum which represents compliance status
    """
    UNKNOWN = 0
    EXEMPT = 1 << 1
    COMPLIANT = 1 << 2
    ERROR = 1 << 3
    INGRACETIME = 1 << 4
    NONCOMPLIANT = 1 << 5
    ISOLATIONCANDIDATE = 1 << 6
    ISOLATED = 1 << 7

    @classmethod
    def to_string(cls, enum):
        # Build list of enum values, ordered by value
        attribs = set()
        for k, v in cls.__dict__.iteritems():
            try:
                if not k.startswith("_"):
                    if v == enum:
                        attribs.add(k)
                        break
                    elif v and v & enum == v:
                        attribs.add(k)
            except TypeError:
                pass

        mylist = sorted(attribs, key=cls.__dict__.__getitem__)
        
        return ",".join(mylist)

# Setup Random Sleep
sleep_time = 0
if args.sleep:
    sleep_time = randint(0, args.sleep)
else:
    sleep_time = randint(0, 60)
time.sleep(sleep_time)

# Braveheart status
bh_status = False

# AWS API Gateway key
api_key = 'kQUC9SOqoh2bdM0L2YCBx6TKhW9WT4FT13ahFi0e'

# Get Computer Information
try:
    # Get Hostname
    hostname = os.uname()[1].split('.')[0]

    # Get MacOS infotmation
    if os.uname()[0] == 'Darwin':
        operating_system = 'MAC'
        os_version = 'MacOS {}'.format(platform.mac_ver()[0])
        # Get Certificate Authentication uncomment later when Certificate authentication goes live
        #AUTH_TOKEN=subprocess.check_output('/usr/local/amazon/bin/CertificateAuthentication')

        # Get Braveheart Membership
        if os.path.exists('/Library/.Bravehearts'):
            bh_status = True

    # Get Linux information
    elif os.uname()[0] == 'Linux':
        operating_system = platform.linux_distribution()[0]
        if operating_system == 'Ubuntu':
            os_version = 'Ubuntu_{}'.format(platform.linux_distribution()[1])
        else:
            try:
                # Check if OS is Amazon Linux
                with open('/etc/system-release', 'r') as system_release:
                    release = system_release.read()
                    if release.startswith('Amazon'):
                        operating_system = 'AmazonLinux'
                        os_version = 'AmazonLinux_{}'.format(release.strip()[-7:])
                    else:
                        operating_system = 'RHEL'
                        os_version = 'RHEL_{}'.format(platform.linux_distribution()[1])
            except:
                operating_system = 'RHEL'
                os_version = 'RHEL_{}'.format(platform.linux_distribution()[1])

        # Get Certificate Authentication token
        #import cert_auth
        #AUTH_TOKEN = cert_auth.get_auth_token()

        if subprocess.check_output(['amazon-config-read', 'braveheart_status']).lower() == "true" or subprocess.check_output(['amazon-config-read', 'braveheart']).lower() == 'true':
            bh_status = True
    
    # Unable to determine platform
    else:
        logger.error('Unable to determine current platform. Script will exist.')
        exit
# Exit script is unable to get information
except:
    logger.error('Error: Unable to determine current platform. Script will exist.')
    exit

#Get base url based on bravhearts status
if bh_status:
    URL_BASE='https://ueup36s7i9.execute-api.us-west-2.amazonaws.com/beta/integ'
else:
    URL_BASE='https://ueup36s7i9.execute-api.us-west-2.amazonaws.com/beta/prod'


#-----------------------------Functions-----------------------------

def main():
    # Get ACME status and post to API
    get_acme_status()

    # Get ACME compliance status and post to API
    get_acme_compliance_status()

    try:
        # Get a current dump of all running processes
        process_dump = subprocess.check_output(['ps','aux']).lower()

        if operating_system == 'MAC':
            # Check if jamf process exists
            post_agent_status('jamf', 'Running' if 'jamf' in process_dump else 'Stopped')
            
            # Check if Cylance process exists
            post_agent_status('Cylance', 'Running' if 'cylance' in process_dump else 'Stopped')
        
        else:
            # Check to see if Virtual Box is installed and has active VMs
            check_for_vms()
        
        # Check if Tanium process exists
        post_agent_status('TaniumClient', 'Running' if 'taniumclient' in process_dump else 'Stopped')

    except subprocess.CalledProcessError as e:
        logger.error('Failed to record Agent(s) status')
        logger.error('Exception: %s', e.message)

    # Check ADM on AmazonLinux & RHEL
    if operating_system == 'RHEL' or operating_system == 'AmazonLinux':
        post_agent_status('ADM', 'Running')

def get_acme_owner():
    try:
        if operating_system == 'MAC':
            return subprocess.check_output(['defaults', 'read', '/Library/Preferences/com.amazon.deviceinfo.plist', 'deviceOwner']).strip()
        elif operating_system == 'Ubuntu':
            return subprocess.check_output(['amazon-config-read', 'primary_user']).strip()
        else:
            return 'Unkown'
    except subprocess.CalledProcessError as e:
        logger.error('Exception: %s', e.message)
        return 'Unkown'

def get_acme_version():
    try:
        return subprocess.check_output(['/usr/local/amazon/bin/acme', '-V'])[9:]
    except subprocess.CalledProcessError as e:
        logger.error('Exception: %s', e.message)
        return 'Unkown'

def get_acme_compliance_status():
    try:
        result = subprocess.check_output(['/usr/local/amazon/bin/acme', '--compliance-status', '--no-history', '--json'])
        json_obj = json.loads(result)
        modules = json_obj['data']['modules']
        
        # Get ACME version and owner information
        acme_version = get_acme_version()
        acme_owner = get_acme_owner()

        # Iterate over modules and post compliance status to API
        for module in modules.keys():
            status = ComplianceStatus.to_string(modules[module]['last_compliance_status'])
            deadline = modules[module]['last_evaluation_result']['isolation_deadline']

            if not deadline:
                deadline = 'N/A'
            
            # Create dict of data to send to API
            data = {
                'ComputerName': hostname,
                'Module': module,
                'Status': status.lower(),
                'StatusString': 'N/A',
                'Deadline': deadline,
                'AcmeVersion': acme_version,
                'AcmeOwner': acme_owner,
                'Platform': operating_system
            }
            # Create the URL
            url = '{}/acmecompliance?{}'.format(URL_BASE, urllib.urlencode(data))
            # Add API Key to headers
            headers = {'x-api-key': api_key}
            # Create the Request. 
            request = urllib2.Request(url, None, headers)
            # Getting the response
            response = json.loads(urllib2.urlopen(request).read())

            if 'status' in response.keys():
                if response['status'] == "SUCCESS":
                    logger.info('ACME %s Compliance was successfully recorded', module)
                    continue
            
            logger.error('ACME %s Compliance was not successfully recorded', module)
    except subprocess.CalledProcessError as e:
        logger.error('Failed to get ACME Compliance.')
        logger.error('Exception: %s', e.message)
    except urllib2.HTTPError as e:
        logger.error('Failed to record ACME Compliance')
        logger.error('HTTPError: %s', str(e.code))
    except urllib2.URLError as e:
        logger.error('Failed to record ACME Compliance')
        logger.error('URLError: %s', e.reason)
    except httplib.HTTPException as e:
        logger.error('Failed to record ACME Compliance')
        logger.error('HTTPException: %s', e.message)
    except Exception as e:
        logger.error('Failed to record ACME Compliance')
        logger.error('Exception: %s', e.message)

def post_agent_status(agent, status):
    try:
        # Create dict of data to send to API
        data = {
            'ComputerName': hostname,
            'Agent': agent,
            'Status': status,
            'OS': os_version
        }
        # Create the URL
        url = '{}/agenthealth?{}'.format(URL_BASE, urllib.urlencode(data))
        # Add API Key to headers
        headers = {'x-api-key': api_key}
        # Create the Request. 
        request = urllib2.Request(url, None, headers)
        # Getting the response
        response = json.loads(urllib2.urlopen(request).read())

        if 'status' in response.keys():
            if response['status'] == "SUCCESS":
                logger.info('%s %s status was successfully recorded', agent, status)
                return
        logger.error('%s %s status was not successfully recorded', agent, status)
    
    except urllib2.HTTPError as e:
        logger.error('Failed to record Agent Status')
        logger.error('HTTPError: %s', str(e.code))
    
    except urllib2.URLError as e:
        logger.error('Failed to record Agent Status')
        logger.error('URLError: %s', e.reason)
    
    except Exception as e:
        logger.error('Failed to record Agent Status')
        logger.error('Exception: %s', e.message)

def get_acme_status():
    try:
        # Check if ACME is running
        result = re.sub(' +',' ', subprocess.check_output(['/usr/local/amazon/bin/acme', '--agent-status']))
        if 'Enabled: True' in result:
            post_agent_status('ACME', 'Running')
        else:
            post_agent_status('ACME', 'Stopped')
    
    except subprocess.CalledProcessError as e:
        post_agent_status('ACME', 'Stopped')
    except Exception as ex:
        logger.error('Failed to record ACME status')
        logger.error('Exception: %s', ex.message)

def check_for_vms():
    #Ubuntu VM Dev Desktop metric: https://tt.amazon.com/0165416809
    try:
        try:
            vms = subprocess.check_output(['VBoxManage','list', 'runningvms']).splitlines()
            
            if len(vms) > 0:
                vb_status = 'Running'
            else:
                vb_status = 'Stopped'
            
        except OSError:
            vb_status = 'NotInstalled'
        
        post_agent_status('VirtualBox', vb_status)
    
    except subprocess.CalledProcessError as e:
        logger.error('Failed to record VirtualBox status')
        logger.error('Exception: %s', e.message)

if __name__ == "__main__":
    main()
