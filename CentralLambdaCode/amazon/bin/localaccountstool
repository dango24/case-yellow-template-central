#!/System/Library/Frameworks/Python.framework/Versions/Current/bin/python

## localaccountstool
## Manages local accounts for Amazon Mac systems.
## Written by Gerrit DeWitt (gerritd@amazon.com)
## Modified by Jason Simmons (jasosimm@amazon.com)
## Version 2.9.8.5 - 2018-10-25 Copyright Amazon

import os, sys, time, datetime, uuid, base64
sys.path.insert(0,'/usr/local/amazon/libexec/acme')
from common_acme import *
from common_acme_crypto import *

## SUBROUTINES

def azShowToolHelp():
## Displays syntax help.
	print '''
-------
Local Accounts Tool (localaccountstool):  Manages various local accounts.
Version 2.9.8.4d Copyright Amazon
https://w.amazon.com/index.php/ClientEng/Mac/ACME_Assistant_and_Automations
-------
USAGE: localaccountstool configure
configure: Manages the passwords and account details for local accounts.
-------
'''

def validateArgs():
## Validates arguments, and returns true/false.
	# Default:
	argsValid = False
	global action
	if len(sys.argv) == 2:
		# Define args:
		action = sys.argv[1]
		# Validate args:
		if action == 'configure':
			argsValid = True		
	# Return:
	return argsValid

def validateAdminAccount():
## Validates attributes of the Admin account.
	# Default:
	attrValidationArray = []
	adminAccountValid = False
	haveFalseInAttrValidationArray = False
	localAdminAccountAttrDict = mainDictionary['localAdminAccountConfigDict']['localAdminAccountAttrDict']
	# Read and check user attributes:
	cmd = [ '/usr/bin/dscl','-plist','/Local/Default','read','/Users/admin' ]
	[output,returnCode] = azSubprocess(cmd)
	if ( returnCode == 0) and output:
		outputDict = azReadPlistFromStr(output)
		if outputDict:
			for attribute,value in localAdminAccountAttrDict.iteritems():
				if str(value) == str(outputDict['dsAttrTypeStandard:'+attribute][0]):
					attrValidationArray.append(True)
	# Determine adminAccountValid:
	for item in attrValidationArray:
		if not (item and True):
			haveFalseInAttrValidationArray = True
			break
	# The adminAccountValid is true only when we have an attrValidationArray with all True elements
	# whose count matches the count of localAdminAccountAttrDict.
	if (not haveFalseInAttrValidationArray) and (len(attrValidationArray) == len(localAdminAccountAttrDict)):
		adminAccountValid = True
	# Return:
	return adminAccountValid

def createAdminAccount():
## Create the user account.
	# Default:
	createdAccount = False
	localAdminAccountAttrDict = mainDictionary['localAdminAccountConfigDict']['localAdminAccountAttrDict']
	adminHomeDirPath = localAdminAccountAttrDict['NFSHomeDirectory']
	# Create account = dscl creates the GUID dynamically.
	cmd = ['/usr/bin/dscl','/Local/Default','-create','/Users/admin']
	[output, returnCode] = azSubprocess(cmd)
	returnCodes = returnCode
	# Append other account attributes:
	for attribute,value in localAdminAccountAttrDict.iteritems():
		if attribute != 'RecordName':
			cmd = ['/usr/bin/dscl','/Local/Default','-create','/Users/admin',attribute,str(value)]
			[output,returnCode] = azSubprocess(cmd)
			returnCodes = returnCodes + returnCode
	# Update group membership:
	cmd = ['/usr/sbin/dseditgroup','-o','edit','-a','admin','-t','user','admin']
	[output,returnCode] = azSubprocess(cmd)
	returnCodes = returnCodes + returnCode
	# Manage home directory permissions:
	if os.path.exists(adminHomeDirPath):
		cmd = ['/usr/sbin/chown','-R','admin',adminHomeDirPath]
		[output,returnCode] = azSubprocess(cmd)
		returnCodes = returnCodes + returnCode
	# Determine createdAccount:
	if returnCodes == 0:
		createdAccount = True
	# Return:
	return createdAccount

## MAIN
def main():
	# Open mainDictionary:
	global mainDictionary
	mainDictionary = azLoadMainDictionary()
	# Parse args:
	if not validateArgs():
		azShowToolHelp()
	else:
		# Determine if the user is root.
		[haveRootUser, userHomePath] = validateUserIsRoot()
		if not haveRootUser:
		# Root required.
			logger.error('This tool must be run by root.')
		else:
			# Default states for other variables we write:
			problem = 'no-problem'
			lastCheck = datetime.datetime.utcnow()
			# CONFIGURATION ACTION 1: Check/create local Admin account.
			if validateAdminAccount():
				logger.info('Admin account present and valid.')
			else:
				logger.error('Admin account missing or its attributes are not correct.')
				createdAdminAccount = createAdminAccount()
				if createdAdminAccount:
					logger.info('Created or updated the Admin account successfully.')
				else:
					logger.error('Failed to create or update the Admin account.')
			# Update prefs.
			# Preference file is system domain.
			assistantPrefsPath = mainDictionary['prefsFile'].replace('~','').replace('__azIdentifier__',azIdentifier)
			try:
				assistantPrefsDict = azReadPlist(assistantPrefsPath)
			except:
				assistantPrefsDict = {}
			# These keys may be missing if there's a problem:
			try:
				assistantPrefsDict['lastCheck'] = lastCheck
				assistantPrefsDict['status'] = status
			except:
				logger.debug('No status information.' )
			# Problem key should always be present:
			assistantPrefsDict['problem'] = problem
			# Write prefs file:
			azWritePlist(assistantPrefsDict, assistantPrefsPath)

if __name__ == '__main__':
	global azIdentifier
	global logger
	
	azIdentifier = 'com.amazon.acme.accounttool'
	logger = azLogger(azIdentifier)
	try:
		main()
	except:
		logger.error('Generic exception.')
